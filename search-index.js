var searchIndex = {};
searchIndex['structures'] = {"items":[[0,"","structures","Data structures of various shapes and sizes. These structures are not\nnecessarily highly optimized or intended for production scale use. They\nare however useful for learning about Rust, and how the core building\nblocks of the language work.",null,null],[0,"list","","Lists are ordered sequences of values, which can be iterated over.",null,null],[0,"linked_list","structures::list","",null,null],[3,"Iter","structures::list::linked_list","Iterator for lists by reference.",null,null],[3,"IntoIter","","Iterator for lists by value.",null,null],[4,"LinkedList","","A simple recursively defined linked list enumeration type.",null,null],[13,"Cons","","",0,null],[13,"Nil","","",0,null],[6,"MoveResult","","A convenience type for results which are used to move ownership back to\nthe caller in the case of an error.",null,null],[11,"cmp","","",0,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"eq","","",0,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"linkedlist"},{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"linkedlist"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"new","","Return a new empty linked list. This is semantically equivlent to\n`List::Nil`.",0,{"inputs":[{"name":"linkedlist"}],"output":{"name":"linkedlist"}}],[11,"is_empty","","Determine if a linked list is empty.",0,{"inputs":[{"name":"linkedlist"}],"output":{"name":"bool"}}],[11,"len","","Return the length of a list. This function relies on the implementation\nof `into_iter()` for creating a iterator over references to the\nelements.",0,{"inputs":[{"name":"linkedlist"}],"output":{"name":"usize"}}],[11,"push","","Add an element to the front of the list. Insert is constant time\nbecause we return the new list containing the item, and the old now\nmoved list.",0,{"inputs":[{"name":"linkedlist"},{"name":"t"}],"output":{"name":"linkedlist"}}],[11,"pop","","Return both the first and rest of a list, or `None` if called on `Nil`.\nHere `Nil` represents the end of the list, and contains no item. The\nreturned values are moved, so it's important store them if they are\nneeded later.",0,{"inputs":[{"name":"linkedlist"}],"output":{"name":"option"}}],[11,"insert","","Returns the list with an item inserted at the given index. Indexing\nstarts at zero. For example `(Cons 7 (Cons 9 (Cons 3)))` has `7` at\nindex 0, `9` at 1, and `3` at 2. Elements in the list after the\ninserted item will all have an index one larger than before, but the\norder of these elements is maintained.",0,{"inputs":[{"name":"linkedlist"},{"name":"usize"},{"name":"t"}],"output":{"name":"moveresult"}}],[11,"remove","","Removes an item by index in the list. Like `pop`, both the item and\nthe rest of the list are moved and returned. Indexing starts at 0, see\n`insert` for an example of the indexing. Like `insert` the order of\npersisted elements is unchanged.",0,{"inputs":[{"name":"linkedlist"},{"name":"usize"}],"output":{"name":"moveresult"}}],[11,"from_iter","","",0,{"inputs":[{"name":"linkedlist"},{"name":"i"}],"output":{"name":"linkedlist"}}],[11,"into_iter","","",0,{"inputs":[{"name":"linkedlist"}],"output":{"name":"intoiter"}}],[11,"next","","",1,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"next","","",2,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[0,"tree","structures","Trees are non-cyclic graphs with a singular root node.",null,null],[0,"binary_tree","structures::tree","",null,null],[4,"BinaryTree","structures::tree::binary_tree","",null,null],[13,"Node","","",3,null],[13,"Leaf","","",3,null],[11,"cmp","","",3,{"inputs":[{"name":"binarytree"},{"name":"binarytree"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"binarytree"},{"name":"binarytree"}],"output":{"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"binarytree"},{"name":"binarytree"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"binarytree"},{"name":"binarytree"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"binarytree"},{"name":"binarytree"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"binarytree"},{"name":"binarytree"}],"output":{"name":"bool"}}],[11,"hash","","",3,null],[11,"eq","","",3,{"inputs":[{"name":"binarytree"},{"name":"binarytree"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"binarytree"},{"name":"binarytree"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"binarytree"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"binarytree"}],"output":{"name":"binarytree"}}],[11,"new","","",3,{"inputs":[{"name":"binarytree"}],"output":{"name":"binarytree"}}],[11,"push","","",3,{"inputs":[{"name":"binarytree"},{"name":"t"}],"output":{"name":"binarytree"}}],[11,"remove","","",3,{"inputs":[{"name":"binarytree"},{"name":"t"}],"output":{"name":"option"}}],[11,"default","","",3,{"inputs":[{"name":"binarytree"}],"output":{"name":"self"}}],[11,"add","","",3,{"inputs":[{"name":"binarytree"},{"name":"binarytree"}],"output":{"name":"binarytree"}}],[11,"next","","",3,{"inputs":[{"name":"binarytree"}],"output":{"name":"option"}}],[14,"linked_list!","structures","Create a linked list with elements pushed into it. Much like the `vec!`\nmacro.",null,null]],"paths":[[4,"LinkedList"],[3,"IntoIter"],[3,"Iter"],[4,"BinaryTree"]]};
initSearch(searchIndex);
